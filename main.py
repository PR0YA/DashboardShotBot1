import asyncio
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from config import TELEGRAM_TOKEN
from services.google_sheets import GoogleSheetsService
from services.screenshot import ScreenshotService
from utils.logger import logger
import io

class DashboardBot:
    def __init__(self):
        self.google_sheets_service = GoogleSheetsService()
        self.screenshot_service = ScreenshotService()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é"""
        # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton("üì∏ PNG", callback_data="png"),
                InlineKeyboardButton("üñº JPEG", callback_data="jpeg"),
                InlineKeyboardButton("üåÖ WebP", callback_data="webp")
            ],
            [
                InlineKeyboardButton("‚ú® PNG —Å —É–ª—É—á—à–µ–Ω–∏–µ–º", callback_data="png_enhance"),
                InlineKeyboardButton("‚ú® JPEG —Å —É–ª—É—á—à–µ–Ω–∏–µ–º", callback_data="jpeg_enhance"),
                InlineKeyboardButton("‚ú® WebP —Å —É–ª—É—á—à–µ–Ω–∏–µ–º", callback_data="webp_enhance")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_text = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DashboardSJ Bot\!*

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã Google Sheets\.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*
‚Ä¢ PNG \- –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
‚Ä¢ JPEG \- –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
‚Ä¢ WebP \- —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

*–í–∞—Ä–∏–∞–Ω—Ç—ã —É–ª—É—á—à–µ–Ω–∏—è:*
‚Ä¢ –û–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç \- —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è
‚Ä¢ –° —É–ª—É—á—à–µ–Ω–∏–µ–º \- –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá
"""

        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='MarkdownV2'
        )

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        format_data = query.data.split('_')
        format_type = format_data[0]
        enhance = len(format_data) > 1 and format_data[1] == 'enhance'

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        enhancement_text = " —Å —É–ª—É—á—à–µ–Ω–∏–µ–º" if enhance else ""
        status_message = await query.message.reply_text(
            f"üì∏ –°–æ–∑–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_type.upper()}{enhancement_text}...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot_data = await self.screenshot_service.get_screenshot(format_type, enhance)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            enhancement_caption = "‚ú® –° —É–ª—É—á—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞" if enhance else "üì∏ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
            caption = f"–§–æ—Ä–º–∞—Ç: {format_type.upper()}\n{enhancement_caption}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            await query.message.reply_photo(
                photo=io.BytesIO(screenshot_data),
                caption=caption
            )

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await status_message.delete()

        except Exception as e:
            error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            logger.error(error_message)
            await status_message.edit_text(error_message)

    def run(self):
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            application = Application.builder().token(TELEGRAM_TOKEN).build()

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            application.add_handler(CommandHandler("start", self.start))
            application.add_handler(CallbackQueryHandler(self.button_handler))

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            application.run_polling()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
            raise

if __name__ == '__main__':
    bot = DashboardBot()
    bot.run()